Mon Jan 17 07:32:40 PST 2005
Updated for new site Fri Feb  2 12:57:49 PST 2007

Swish-e site.

This site is maintained in CVS.  Pages should not be modified directly.
Check out the site from cvs, and modify the pages locally.  Rebuild locally
to review and then check in.

Overview
--------

The website generation has a few dependencies.  There are scripts to generate
the various parts.

    - swish-e current release source
        Used to build the swish-e docs.

    - swish-e cvs checkout
        Used to build the nightly build, and the docs from that.

    - archive (hypermail)
        currently, procmail feeds new posts to hypermail to
        add new posts to the archive.  The posts are also archived
        in the "mbox" directory by month in mbox format.

    - archive index
        When the archive is updated a flag is set and then cron
        can re-index the hypermail archive.

    - swish-daily
        This is where daily tarballs are placed.  The website
        creates an index page from the list of files

    - swish-release
        Similar to the swish-daily directory, but for releases



Directory Structure
-------------------

    /<top level dir>

        swish_daily_build/          - where the daily builds are created
        swish-daily/                - daily tarballs

        swish_release_build/        - where the release is build (for the docs)
        distribution/               - releases (tarballs, .exe, old stuff)
            old/                    - this is needed.

        mbox/                       - mailbox archives by month
        archive/                    - hypermail archive

        indexes/                    - indexes for the archive and website

        swish_website/              - source for building the site (more below)

        pubilc_html                 - bulk of generated website.


    Apache's DocumentRoot is pubilc_html, and swish-daily and distribution
    are Aliased.  See httpd.conf.


Notes on building the HTML docs
-------------------------------

    There's somewhat of a circular dependency.  Before the website can be
    built the swish-daily needs to be generated.  This makes the pod docs
    available for generating the documentation.

    But, to build a daily tarball that include the HTML docs the website code
    needs to be installed.

    The swish-e configure script looks for the program "build-swish-docs" in the
    path.  This is typically a symlink to the swish_website/bin/build program.
    This program is used to build the HTML documentation that is placed in the tarball
    generated by the swish-daily.pl program.



Creating the above directories
------------------------------

    The following examples use $ROOT as the top-level directory above.
    This might be /opt/swish, for example.


    swish_website
    -------------
        The website isn't generated yet, but the code is needed before
        building the daily tarballs.

            cvn co http://svn.swish-e.org/swish_website/ $ROOT/swish_website
            ln -s $ROOT/swish_website/bin/build /usr/local/bin/build-swish-docs

        The actual site will be built later.




    swish-daily_build / swish-daily
    -------------------------------

        Use the swish-daily.pl script to create the daily builds.
        The script uses the cwd for the default "topdir" if not specified,
        and also has the command to check out from trunk by default.

        But, it's probably more explicit to pass in the build directory
        by specifying "topdir".

            $ROOT/swish_website/bin/swish-daily.pl \
                --topdir=$ROOT/swish_daily_build \
                --tardir=$ROOT/swish-daily \
                || echo "Problem building swish-daily"


        The script will exit non-zero if there's a problem and any errors
        should be in the log files.  This should be run nightly.

        swish_daily_build will be created if doesn't exist,
        but the tardir directory must exist.

            mkdir $ROOT/swish-daily


        This does a fresh checkout.  Obviously, doing a svn update would
        be much faster, but better to test a fresh checkout.

        After all that there's also a script Make_Daily.sh
        that does the above.



    swish_release_build / distribution
    ----------------------------------

        This is only run when a new release is created.
        But the current release source needs to be available
        so the documentation can be generated on the website.

        This is similar to the above, but the source is not fetched
        via svn, rather from the current release tarball.
        Also, assuming the tarball is already in the releases directory
        there's no need to write it to the tardir.


            $ROOT/swish_website/bin/swish-daily.pl \
                --fetchtarurl=http://swish-e.org/distribution/latest.tar.gz \
                --topdir=$ROOT/swish_release_build \
                --notimestamp \
                --noremove \
                --tardir=$ROOT/distribution \
                || echo "Problem building release"

        There's also a Make_Release.sh script.  Review it before use.

        running --help will show available options.


        Note that this can be used to generate an actual release (by fetching
        from svn instead), but it's better to generate the release separately
        and test it.  In that case REMOVE the --tardir option above.




    mbox / archive
    --------------

        Copy the existing mbox directory from where ever they currently are
        located.

        Generate the hypermail archive.  This needs to be done from the hypermail
        directory since that's where the templates are located.

        This step is only needed to create the initial archive.  The archive
        is added to as new messages arrive (e.g. via procmail).

            cd $ROOT/swish_website/hypermail
            gzip -dc $ROOT/mbox/*.gz \
                | hypermail \
                    -i \
                    -c hypermailrc \
                    -d $ROOT/archive.new \
            && mv $ROOT/archive.new $ROOT/archive


        Note, would really be good dynamically display the archive
        so that the headers and footers can be shared.


    indexes
    -------

        This directory contains two indexes.  One for the archive and
        another for the website.

        The web site is not created yet, so it cannot be indexed.

            mkdir $ROOT/indexes

            $ROOT/swish_website/bin/index_hypermail.pl $ROOT/archive \
                | swish-e \
                    -S prog \
                    -i stdin \
                    -c $ROOT/swish_website/etc/archive.conf \
                    -f $ROOT/indexes/archive.swish-e \
                    -v0

        This should be a cron task.  Normally set a flag when
        the archive is updated (new message arrives).


    public_html
    -----------
        Now the website can be created.  The bin/build script is used
        to generate the website.  The script will detect when files
        need to be generated, or passing --all will tell it to generate
        the complete site.

        There are a lot of options, and running build --help will list them.
        The same build script is used when building from cvs to generate the
        html docs for the tarball.

        The site must be told where to find all the directories created above.
        It determines where the source files are relative to the location of the
        script, but must be told everything else:


            $ROOT/swish_website/bin/build \
                --dest=$ROOT/public_html \
                --archive=$ROOT/indexes \
                --swishsrc=$ROOT/swish_release_build/latest_swish_build/source \
                --develsrc=$ROOT/swish_daily_build/latest_swish_build/source \
                --download=$ROOT/distribution \
                --daily=$ROOT/swish-daily \
                --all


        Luckily, there's a build script that does all that, and also indexes
        the site.


        indexes -- part 2
        -----------------

            Once the site is it's time to build the index of the web site.



















Site layout
-----------

    ./
        -> src              - web source docs.
        -> public_html      - output files.  This is DocumentRoot
            distribution        - symlink to the swish-releases tarball directory[1]
            swish-daily         - symlink to swish-daily tarball directory
        -> bin              - bin/build script and other utilities
        -> lib/config       - site config templates.
        -> lib/config/site  - contains swish-e current version (see TODO)
        -> lib/config/map   - defines layout of site and site's menu
        -> lib/page         - templates that define the look of each page
        -> lib/pod_toc      - top-level index for pod docs

[1] these two (three including the "old" dir) directories are read when
building the index listings for the downloads, plus they must be available via
the /distribution and /swish-daily URLs.  Originally, these were outside of
document root (public_html) in dirs_public and accessed with Alias in
httpd.conf.  And lib/config/site set their locations for generating the
index.html pages listing the files.


Requirements
------------

    Swish-e must be installed on the system and the program
    swish-config must be in the path -- this is used to find where
    helpers (e.g. perl modules) are installed.


Building the site
-----------------

    Check out the "swish_website" project from CVS.  Once checked out you need to
    initialize a few directories, and then build the site.

        $ cd swish_website
        $ mkdir -p public_html dirs_public/download/old dirs_public/swish-daily
        $ bin/build -swishsrc=$HOME/swish-e -develsrc=$HOME/swish-e -archive=archive/index.swish-e

    (Or symlink as needed -- which is what I did.)

    Also in lib/config/site you might want to define where swish-daily and
    the download dirs are set.  Currently to /distribution and /swish-daily.
    The download and swish-daily pages link files to those dirs.

    You need Template Toolkit, Pod::POM (from CPAN) and anything else it
    complains about.

    Those output directories can be overridden.  see bin/build --help  for
    help.  "dirs_public" can be set in lib/conifg/site.

    From the top-level directory* (where this README file is located)
    run:

        bin/build -all -swishsrc=$HOME/swish-e -v

    (assuming that's where the swish-e source is located)

    That builds both the website and the pod docs and writes them
    to the "public_html" directory.

    * Actually, from anywhere -- directories are determined relative to
    where the /bin/build program is found.

    Running without the -all switch will cause only the changed files to be
    rebuilt.  Normally you run with -all.

    Note: the docs/index.html file can only be correctly built if ALL the pods
    are processed (using -all).  So do not rm public_html/docs/index.html and expect
    it to be rebuilt automatically.

    For a bit more info, run:

        bin/build -help


    Note: if speedy (speedyCGI) is installed and in the path at build time the
    the search script will run that instead of perl.


Download and swish-daily directories
------------------------------------

These directory listings are *static* pages.  If a new file is added
to one of these directories you need to touch the source file or rebuild
all pages:

    $ touch src/download/index.html && bin/build -v
or
    $ bin/build -all -v



Building the html docs for distribution
---------------------------------------

    Specify the pod destination directory:

        bin/build -all -swishsrc=$HOME/swish-e -poddest=$HOME/swish-e/html

    This adjusts the links so that every non-pod link points to the swish-e.org
    site; pod links are local.


Content Creation
----------------

Links:
    All internal pages can (and probably should) be defined in the 
    config/map file.  This is mostly for defining the menu, but entries
    can be marked "hidden".  Even off-site links can be entered (look for link to CVS)

    Entries in the config/map file can then be linked
    to using a macro:

     Check out the [% link_to_page('readme#Key features', 'full list of features') %].

    That will find the (first) menu item that has "readme" for an id
    and create a complete <a>..</a> tag.  notice that it's possible to use
    fragments.

    The macro has at least three parameters:
        1) the menu id to search for
        2) optional text to use for the link -- otherwise the menu text is used
        3) flag to say just return the href part of the link


    TODO:
        add MACROS for page sections and the abilty to create a TOC at the top of the
        page.



Indexing the site for searches
------------------------------

To index the site run from the top level directory:

    $ SWISH_SITE=http://swish-e.org swish-e -c etc/swish.config -S prog

SWISH_SITE is the top level URL.
START_FILE is the starting file.  Default is index.html
(SWISH_SITE=http://swish-e.org/docs START_FILE=readme.html to index just one file)

That writes the index to public_html/search/

Or to run it quiet:

$ SPIDER_QUIET=1 SWISH_SITE=http://localhost/apache/public_html \
    swish-e -c etc/swish.config -S prog -v0

Capture output (for debugging) like this:

  $ SWISH_SITE=http://localhost/apache/public_html \
        /usr/local/lib/swish-e/spider.pl etc/spider.config > out



todo: add metaname selection and create build script that is built from


TODO
----

- add 404 and 500 pages (should they be cgi scripts to show the probled
path, or can people figure that out on their own?

- Have title be part of the layout (instead of added on each page)?


- [done] Fetch version from -swishsrc/configure instead of hard-coded in config/site

- Split out some of the lib/page templates into smaller components that can be
overridden separately.

- add to META on each page [author = '$Author$'] and maybe also $Date$, although
lastmod is probably fine.  Waiting until can think of a better way to do the same
for the pod files.

- [done] test speedycgi and install on sunsite

- [done - not really needed under speedy ] enable template caching for the search script

- [done] Probably should filter all hrefs= and name= through |uri|html.  Plus some
are very large.  Maybe shorten or md5 them?  If so, then need to adjust link_to_page().
[Well, partially done.  Pod::POM prevents access to the #fragment so there's spaces in hrefs
which is ok, I suppose but other chars could mess things up.]

- [done - just rebuld, doesn't take any time] 
  Try (again) to find a way to detect when a cvs update doesn't really update any files.

- [done - see above]Add disk cache for table of contents for each POD page so index.html can be
regenerated without having to parse all pods.  Not that parsing a small handfull of
pods is a big deal....

- [done] add timezone to dates and make UTC.

- Set fixed pitch font for timestamp on file listings.  Currently ugly.
