[%  # From chapter 11 of Badger book.

# page.trail tracks path to the current page.
DEFAULT page.trail = [ ];
DEFAULT navigation = {};

this_level = 0;
first_item = 0;

# List of menu items we're constructing.
map.items = [ ];


# Walk through item names in map.menu.
FOREACH id IN map.menu;

    # Allow for there to be a missing page entry (setting the name to the menu id)
    SET map.page = {} UNLESS map.page;
    SET map.page.$id = { name = id } UNLESS map.page.$id;
    SET map.page.$id.name = id UNLESS map.page.$id.name;
    item = map.page.$id;



    # Add location data.
    item.id   = id;

    # Check for external link
    IF item.external;
        item.url = item.external;

    ELSE;
        item.path = path ? "$path/$id" : id;

        item.extension = item.defined('extension') ? item.extension : '.html';
        item.indexname = item.defined('indexname') ? item.indexname : 'index.html';

        UNLESS item.file;
            item.file = item.menu
                      ? "${item.path}/${item.indexname}"
                      : "${item.path}${item.extension}";
        END;



        # Here's a hack to deal with geneating just HTML docs (abslinks is the flag)
        # Want all links to go to http://swish-e.org.  That's set in site.url.root
        # The exception is when geneating links for the docs pages, which then
        # the links are relative to the current directory.

        IF this.abslinks && item.path.match("^docs");
            item.url = item.file.replace('^docs/','./');

            # Adjust the name of the current page for item.hot check below
            SET page.file = "docs/$page.file" UNLESS page.file.match('^docs/');

        ELSE;
            SET item.hidden = 1 IF this.abslinks;  # This removes the non-doc items from the menu
            item.url = "$site.url.root/$item.file";

        END;


        # When buidling pod-only then the docs/ section is moved up to root, which
        # will clash with the real root.  So need to excluded this checking with 
        # generating pods.

        IF !this.abslinks || item.path.match("^docs");

            # Is this item on the path to the current page?
            item.hot  = page.file.match("^(../)?$item.path");
            item.subs = item.hot and item.menu.size;
            item.here = (item.file == page.file);
        END;


    END;


    # Now build navigation and add this item to its parent's list of items
    # How navigation works depends on how you define next/prev and things like that
    # Here we just take'em as them come
    # Some of this would be easier if the list was flat.

    UNLESS item.hidden;


        # Very first link ("Top" for Mozilla)
        SET navigation.Start = item UNLESS navigation.Start;

        # Should these be limited to the current level  Currently: yes
        # Happens because recursion is locallizing last_item.

        SET navigation.Prev  = last_item IF last_item && item.here;
        SET navigation.Next  = item IF last_item && last_item.here;
        SET last_item = item;  # save for next time

        SET navigation.Up    = page.trail.last IF page.trail.last && item.here;

        page.trail.push( item ) IF item.hot;

        # First and Last are a bit more complex
        SET this_level = item IF item.here;
        SET first_item = item UNLESS first_item;


        # Add this item to it's parent's list (recursive menu)
        map.items.push(item);
    END;


    # Recursively process any sub menus

    IF item.menu;
        INCLUDE config/expand
            map  = item
            path = item.path;
    END;


END;  # Foreach


IF this_level && !( navigation.First || navigation.Last );
#IF this_level;
    SET navigation.First = first_item IF first_item && !first_item.here;
    SET navigation.Last  = last_item UNLESS last_item.here;
END;



-%]
